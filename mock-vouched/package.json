{
  "name": "vouched-developers",
  "version": "1.0.0",
  "description": " # Overview  ## How Vouched Works Vouched is an identity verification platform for developers.  Vouched uses a combination of a cloud solution, patent pending AI, [SDKs](/#section/SDKs), and [APIs](/#tag/jobs) to  enable developers to build real-time identity verification applications.  ## Security and Privacy Vouched is built with security and data privacy in mind. Data in transit and at rest is protected through [AES-256 encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard). Vouched systems and services are [SOC2 Type 1](https://en.wikipedia.org/wiki/System_and_Organization_Controls) certified. Vouched processes personal information in compliance with [California Consumer Privacy Act (CCPA)](https://oag.ca.gov/privacy/ccpa)  and [General Data Protection Regulation (GDPR)](https://gdpr-info.eu/).  [ISO/IEC-27001](https://en.wikipedia.org/wiki/ISO/IEC_27001) and [ISO/IEC 27701](https://en.wikipedia.org/wiki/ISO/IEC_27701) certifications that Vouched currently has.<br>  Vouched authenticates your requests using your [keys](/#section/Dashboard/Manage-keys). If the key is missing or incorrect in your request, Vouched will not process the request and return  an unauthenticated error.  There are three types of keys:  - `public` - Required by user facing SDKs ([JS Plugin](/#section/SDKs/JS-Plugin), [iOS](/#section/SDKs/iOS), [Android](/#section/SDKs/Android), [React Native](/#section/SDKs/React-Native))   - `private` - Required by the backend [REST API](/#tag/jobs) - `signature` - Alternative to the private key. Required by the backend [REST API](/#tag/jobs)  ## Vouched Status The status of current Vouched services can be found on our [status dashboard](https://status.vouched.id/).  ## Recognized IDs  | ID Type <img width=1670/> | Name <img width=1670/> | [Country Code](https://www.nationsonline.org/oneworld/country_code_list.htm) <img width=1670/> |  | ----------- | ----------- | ----------- |  |     `citizen-card`      | [Citizen](https://www.canada.ca/en/immigration-refugees-citizenship/services/canadian-citizenship/proof-citizenship/documents.html)    |  Canada, Portugal    |  |   `commercial-license`       |  [Commercial Drivers License](https://en.wikipedia.org/wiki/Commercial_driver%27s_license)    | United States       |  |  `drivers-license`  | [Drivers License](https://en.wikipedia.org/wiki/Driver%27s_license)      | American Samoa, Argentina, Australia, Belarus, Bermuda, Brazil, Canada, China, Colombia, Costa Rica, El Salvador, France, Germany, Hong Kong, India, Ireland, Isle of Man, Israel, Italy, Japan, Luxembourg, Malta, Mexico, Netherlands, New Zealand, Pakistan, Panama, Peru, Philippines, Puerto Rico, Romania, Singapore, Slovakia, South Africa, Spain, Sweden, Switzerland, Thailand, Ukraine, United Kingdom, United States, Vietnam   | |  `drivers-license-permit` | [Drivers License Permit](https://en.wikipedia.org/wiki/Learner%27s_permit)      | Canada, New Zealand, United Kingdom, United States      | |   `employment`  | [Employment  Card](https://en.wikipedia.org/wiki/Employment_authorization_document)        | United States       | |  `global-entry`| [Global Entry Card](https://en.wikipedia.org/wiki/Global_Entry)        | United States       | |    `handgun`  | [Handgun](https://www.loc.gov/law/help/firearms-control/canada.php)         | Canada, United States       | |    `health-insurance`   |  [Health Insurance Card](https://www.canada.ca/en/health-canada/services/health-cards.html)          | Canada, Germany       | |     `identification`      | [Identification Card](https://en.wikipedia.org/wiki/Identity_documents_in_the_United_States#:~:text=Identity%20documents%20in%20the%20United%20States%20are%20typically%20the%20regional,may%20serve%20as%20national%20identification.)   | Argentina, Australia, Belgium, Brazil, Canada, Chile, El Salvador, France, Germany, Guatemala, India, Indonesia, Iraq, Ireland, Italy, Latvia, Lithuania, Malta, Mexico, Netherlands, Peru, Philippines, Romania, Singapore, Slovakia, South Africa, Spain, Turkey, United Arab Emirates, United States, Vietnam  | |  `indian`     | [Indian  Status Card](https://www.sac-isc.gc.ca/eng/1100100032374/1572457769548)      | Canada       | | `nexus`    | [Nexus  Card](https://en.wikipedia.org/wiki/NEXUS)        | United States       | |     `passport`   | [Passport](https://en.wikipedia.org/wiki/Passport)      | Argentina, Australia, Bahrain, Belarus, Bermuda, Brazil, Cameroon, Canada, China, Colombia, CÃ´te d'Ivoire, Denmark, Finland, France, Germany, Ghana, Haiti, Honduras, Hong Kong, Hungary, Iceland, India, Indonesia, Iraq, Ireland, Israel, Italy, Jamaica, Japan, Korea, Republic of, Latvia, Macao, Malaysia, Malta, Mexico, Myanmar, Netherlands, New Zealand, Nigeria, Pakistan, Peru, Philippines, Poland, Russian Federation, Singapore, South Africa, Sri Lanka, Switzerland, Syrian Arab Republic, Thailand, Uganda, Ukraine, United Kingdom, United States, Vietnam | |    `passport-card`| [Passport Card](https://en.wikipedia.org/wiki/United_States_Passport_Card)          | Ukraine, United States     | |      `residence`  | [Residence  Permit](https://en.wikipedia.org/wiki/Residence_permit)     | Belgium, Canada, Germany, Hong Kong, Peru, Spain, United Arab Emirates, United Kingdom, United States, Vietnam | |    `visa`  | [Visa](https://travel.state.gov/content/travel/en/us-visas.html)         | United States       |    ## Postman  Debugging and understanding the Vouched APIs are easier with [Postman](https://www.postman.com/). The steps to add the APIs as a [Postman](https://www.postman.com/) collection are:  1. Download the [OpenAPI specifications](/) 1. [Add OpenAPI to Postman](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/)   ## Swagger  Model Renderings are currently not supported in the [Swagger Editor](https://editor.swagger.io/)  ## Examples   Example use cases for our API are available in [Python](https://github.com/vouched/vouched-python-example) , [Java](https://github.com/vouched/vouched-java-example), [React](https://github.com/vouched/vouched-react-example) and [NodeJS](https://github.com/vouched/vouched-nodejs-example).  # Submit a verification  ## Demo Mode  Demo mode can be enabled and disabled for an account by submitting a ticket to [Vouched support](/#section/Support).  In demo mode, the system will pass the provided demo ids ([Passport](images/usPassport.jpeg), [Driving License](images/Thor_Washington.jpg), [Identification Card](images/philippinesid.jpeg)). Face Match will be passed in demo mode.  To get started; 1. Switch the `id` prop for the [JS Plugin](/#section/SDKs/JS-Plugin) to `upload`. 1. Use one of the ids provided above to test demo mode.   ## Vouched Now  Vouched Now is a No Code way to verify the identity of users. The following user information is required:    - `First Name` and `Last Name` - in order to match to that of the ID   - `Phone Number` and `Email Address` - in order to send a verification invite  Once completed, customers see the results of the ID verification and additional account features such as crosscheck and AAMVA.  1. Sign in to the [dashboard](/#section/Dashboard/Sign-In) 1. Send an [verification invite](/#section/Dashboard/Verification-invites) by email or SMS 1. View the [status](#section/Dashboard/Verification-invites) of the invite  1. View the [verification job results](/#section/Dashboard/Jobs)   ## JS Plugin  The Javascript (JS) Plugin is the recommended way to add Vouched to your web application.   ![Diagram 1](images/JS-Plugin-Flow.png)       1. Sign in to the [dashboard](/#section/Dashboard/Sign-In) 1. Create your [public key](#section/Dashboard/Manage-keys) 1. Click *Get Started* on the side menu 1. Click *Website* 1. Click *Javascript Plugin* 1. Configure and customize your UI as needed. Customize your UI by changing the logo here as well as the [theme](#theme) style. 1. Click *demo* and submit your first job. From here you will be able to try out a real-time verification job. 1. Click *code* to view the JS code for your web application 1. Define a post verification [webhook](/#section/After-a-verification/Webhook) with the `callbackURL` property 1. Define `onInit` to have access to a callback during initialization of the webapp. 1. Set `crossDevice` to true in order to maintain the same session accross multiple devices using the token retrieved from `onInit`. 1. Define `onDone` to redirect to the next page  ### Quick start code   ``` <head>   <!-- utf-8 is required for JS Plugin default fonts -->   <meta charset=\"utf-8\" />   <script src=\"https://static.vouched.id/widget/vouched-2.0.0.js\"></script>   <script type='text/javascript'>        (function() {       var vouched = Vouched({       // Optional verification properties.         verification: {           // verify the user's information            firstName: 'Gladys',           lastName: 'West',           // used for the crosscheck feature           email: 'test@test.id',           phone: '000-111-2222'         },                  appId: \"<PUBLIC_KEY>\",         // your webhook for POST verification processing         callbackURL: 'https://website.com/webhook',          // mobile handoff         crossDevice: true,         crossDeviceQRCode: true,         crossDeviceSMS: true,         onInit: ({token, job}) => {           console.log('initialization');         },                       // callback executed after every time Job was posted         onSubmit: ({stage, attempts, job}) => {          },                  // called when the verification is completed.         onDone: (job) => {           // token used to query jobs           console.log(\"Scanning complete\", { token: job.token });            // An alternative way to update your system based on the            // results of the job. Your backend could perform the following:           // 1. query jobs with the token           // 2. store relevant job information such as the id and            //    success property into the user's profile           fetch(`/yourapi/idv?job_token=${job.token}`);             // Redirect to the next page based on the job success           if( job.result.success){             window.location.replace(\"https://website.com/success/\");           }else{             window.location.replace(\"https://website.com/failed/\");           }         },         onSurveyDone: (job) => {           // callback when survey is submitted         },                         // callback executed after attempt to find camera device         onCamera: ({hasCamera, hasPermission}) => {          },                  // callback executed after DOM changes to Camera         onCameraEvent:(cameraEvent) => {                  },                  // theme         theme: {           name: 'avant',         },       });       vouched.mount(\"#vouched-element\");     })();    </script> </head> <body>   <div id='vouched-element' style=\"height: 100%\"/> </body> ``` ### Sessions  Users can reuse non-completed verifications with sessions. By tying users with sessions, multiple attempts at verifications will  not generate unnecessary verification jobs. Sessions are uniquely identified by the time limited `token` property. The steps to enable sessions are:  1. Set the property `crossDevice`: true 1. Define `onInit` callback to forward the token to your backend.  ```       // initialize Vouched       var vouched = Vouched({         /_* other properties *_/          onInit: ({token, job}) => {           // If crossDevice is true, a web token is created during initialization            // Your backend will save and associate the token the user.           fetch(`/yourapi/idv?job_token=${job.token}&&user=${user.id}`);           console.log('initialization');         }                    }); ```  3. Initialize the `token` if the user has a previously saved one.  ```       var token = null;        // Assuming the user profile contains the previously        // store user information, get the token from the user profile       if( user.token ){         token = user.token;       }       // initialize Vouched       var vouched = Vouched({         /_* other properties *_/          token: token       }); ```  ### Content Security Policy  The HTTP Content-Security-Policy response header allows web site administrators to control resources the user agent is allowed to load for a given page.  With a few exceptions, policies mostly involve specifying server origins and script endpoints.  This helps guard against cross-site scripting attacks ([XSS](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting))  If the Vouched JS Plugin is being embedded into your website and CSP is being used, the following needs to be enabled;   ``` default-src: [ `self`, `unsafe-eval`, `unsafe-inline`, `blob:`, `data:`,                `*.sentry.io`, `*.amplitude.com`, `*.jsdelivr.net`, `*.vouched.id`,                 `*.googleapis.com`, `*.fontawesome.com`, `*.gstatic.com`               ] ```          ### Camera restrictions  Browser permissions for the camera requires a `https` host, a `http` hosted site or `file://` will not work. A `localhost` hosted site is an viable option. For more information  [How to access Camera and Microphone in Chrome without HTTPS?](https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https).   ### Layout Considerations When integrating Vouched into your site design, consider that Vouched component occupies 100% height of the parent container (it has `CSS` rule height: 100% applied). That means that parent container should be given height.   Height should be given, for example, by setting `height` value (`height`: 100%) on the container or by using flex constraints (`flex-grow`: 1 in vertical `flex-box`).   For full specifications, refer to the [JS Plugin SDK](#section/SDKs/JS-Plugin).      ### Mobile Handoff One of our newer features is the Mobile handoff. The JS Plugin has the ability to recognize a person's device (mobile, OS) and show the QR Code or SMS options if the person is on the desktop. It prompts the user to either scan the [QR Code](https://www.hellotech.com/guide/for/how-to-scan-qr-code-iphone-android) or input a mobile number to send the SMS to. Verification continues on the person's mobile device. Once completed, control is given back to the desktop application. This allows for desktop onboarding while leveraging the user's superior mobile camera.  Users will see the following instructions on their mobile device during the Mobile Handoff: <br> 1. Open the Camera App from your phone. 2. Hold the device so the [QR Code](https://www.hellotech.com/guide/for/how-to-scan-qr-code-iphone-android) appears in the viewfinder. 3. Click on notification to open the verification link.  There is also the option to finish the Mobile handoff on your desktop instead on a mobile device, if you wish to do so. In order to enable the Mobile Handoff functionality, set the `crossDevice` and `crossDeviceQRCode` [parameters](#section/SDKs/JS-Plugin) to true.  For the mobile handoff option, a new job is created during each refresh, to generate a token to be used on the mobile device. However, empty jobs are not billable.  Once the verification is completed, the JS callback `onDone` is called on the desktop.  The handoff forwards the verification to a Vouched hosted site. We offer the capability to host the site with a custom domain for a monthly fee. If you would like this feature, configure a CNAME for your domain that points to **i.vouched.id** ``` # nslookup custom.customer.com Server:  8.8.8.8 Address: 8.8.8.8#53  Non-authoritative answer: custom.customer.com canonical name = i.vouched.id. Name: i.vouched.id Address: 34.120.27.192 ``` Once this is completed, email us at [sales@vouched.id](mailto:sales@vouched.id) with the subject \"Request Custom URL Feature\" and provide the CNAME evidence.   ### Localization The Plugin supports 3 languages: English (en), Spanish (es), French-Canadian (fr_CA). Refer to the 'locale' prop in the VouchedProp section.   ## REST - Submit job  ![Diagram 2](images/REST-API-Flow.png)  The `REST` API could be used to submit a verification [job](/#tag/job-model) . Compared to the frontend SDKs ([JS Plugin](/#section/SDKs/JS-Plugin), [iOS](/#section/SDKs/iOS), [Android](/#section/SDKs/Android), [React Native](/#section/SDKs/React-Native)),  the [REST verification submit](/#operation/SubmitJob) has the lowest accuracy rates.  A [resolution of 2K](https://www.tomshardware.com/news/2k-definition,37641.html) is recommended for optimal accuracy and response time (**Max file size allowed is 11 Mb**).  1. Sign in to the [dashboard](/#section/Dashboard/Sign-In) 1. Create your [private key](#section/Dashboard/Manage-keys) 1. Implement [REST - Submit job](/#operation/SubmitJob)   ## REST - Send an invite   With the `REST` API, a customized SMS or email verification invitation could sent programatically.  1. Sign in to the [dashboard](/#section/Dashboard/Sign-In) 1. Create your [private key](#section/Dashboard/Manage-keys) 1. Implement [REST - Send an invite](/#operation/sendInvites)  ## Mobile SDKs  Vouched provides mobile SDKs for [iOS](https://github.com/vouched/vouched-ios) and [Android](https://github.com/vouched/vouched-android). The SDK provides  the constructs to recognize, detect and ensure clear ID images. It also provides the constructs to recognize, detect, and prove liveness on faces. This low-level design allows you to rely on Vouched's AI expertise and still have complete control over the UX.    The [React Native SDK](https://github.com/vouched/vouched-react-native) is a slightly different than the native SDKs. The React Native SDK provides two camera components; one for ID detection and one for face detection. Each  camera component uses a native camera and the corresponding Vouched native SDK.  To get started or run the mobile SDK example app:   - [iOS](#section/SDKs/iOS)   - [Android](#section/SDKs/Android)   - [React Native](#section/SDKs/React-Native)   # After a verification  ## Webhook  Upon the verification [job's](/#tag/job-model) completion, Vouched will `POST` the [job](/#tag/job-model) results to the defined webhook (`callbackURL`).  All webhook requests contain `X-Signature` in request headers. The `X-Signature` is base64 encoded, created using `HMAC-SHA1` using  your private key as the key and using the jobs response as data. To validate the webhook response, perform the same signature procedure and compare if  your generated signature and the sent signature match.  - Note: If your account uses the signature key, the `X-Signature` is base64 encoded, created using `HMAC-SHA1` using  your signature key instead of the private key.    ## API   Verification results are programatically retrievable with the [jobs API](/#operation/findJobs). Each [job](/#tag/job-model) is uniquely identified by the persistent `id`  or ephemeral `token` property.  ## Confidence Scores, Errors, and Signals   The [errors](/#tag/error-model)  provided in a [job](/#tag/job-model) are an indicator of the failure of the `job`. Errors fall under a various  categories. For the `id`, `selfie`, and `faceMatch` categories, a feature called [signal](/#tag/job-model) is available. These provide further  insights into why a specific job may have failed. While `errors` provide information on the error code leading to the failure, `signals` provide detailed information on what lead to the `error`. The `signals` also help to visualize the potential sources for penalties to a  specific category score.      ## Dashboard  Verification job results are available on the dashboard.  1. Sign in to the [dashboard](/#section/Dashboard/Sign-In) 1. View the [verification job results](/#section/Dashboard/Jobs)  # AAMVA For some use cases, only the data of a provided driver's license needs to be verified. You can accomplish this using the **[AAMVA API](#tag/aamva)**  The **[AAMVA API](#tag/aamva)** exposes an endpoint that accepts data on a user's identification card and validates that information against the database of the ID's state's Department of Motor Vehicles/Secretary of State. This check enables you to verify that the data on the card (`drivers-license` or `identification-card`) matches the data held by the jurisdiction that issued the document.  The **[AAMVA](#tag/aamva-model)** verification process consists of two steps:   1. Submit the [AAMVA request](/#operation/submitAamva) with the user info. Include a webhook ('callbackURL') in the request to receive the AAMVA response post completion. 1. The [results](/#tag/job-model) of the AAMVA verification process will be posted to the defined webhook.  AAMVA is supported for most states but there are a few notable exceptions. The states that are not supported by AAMVA are:    - Alaska   - Alabama   - California   - Louisiana   - Minnesota   - New Hampshire   - Nevada   - New York   - Oklahoma   - Pennsylvania   - South Carolina   - Utah   - West Virginia  <sub>AAMVA stands for the American Association of Motor Vehicle Administrators.</sub>  <sub>[AAMVA](#tag/aamva-identity-model) checks are restricted to **US** based `drivers-license`s and `identification-card`s. </sub>  # Watchlist Watchlist helps to identity potential risk associated with a prospective user. This api consolidates data for an individual from multiple  verified data sources. Notable result data include:  - `confidence` - Confidence score for an watchlist match - `data` - Array containing matched records  The watchlist check if performed during the idv process if the feature is enabled and the results are added to the [job](/#tag/job-model) response.  # Crosscheck  The [Crosscheck API](#tag/crosscheck) verifies a user's identity with the provided user information.  Crosscheck results are more accurate with more information. Notable result data include:  - `confidences` - Confidence score for an identity match - `ageRange` - A matching age range - `gender` - Calculated gender information   ## Crosscheck then IDV  Decisioning logic involving Crosscheck and IDV is used to minimize user friction while assuring identity. Here are the steps:  1. Perform [Crosscheck verification](#tag/crosscheck) with the user's information 1. If Crosscheck `confidences.identity` pass the required threshold, continue with the post verification process 1. If Crosscheck fails or other criteria such as `ageRange` or `gender` does not match, move the user to IDV 1. For IDV, employ one of the [verification methods](/#section/Submit-a-verification)  # Dashboard  ## Sign In  1. Sign in with your Vouched credentials at https://app.vouched.id 1. You've made it to your Vouched Dashboard! It should resemble this:   ## 2FA Authentication  Two-Factor Authentication (2FA) can be used to help protect your account from unauthorized access by requiring you to enter an additional code when you sign in. 2FA is mandatory on the dashboard and you will be asked to enter the code from your preferred two-factor authentication method, before being allowed to sign into your account The Two-Factor Authentication feature currently supports the use of an authenticator app ([Android](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en_US&gl=US) or [iOS](https://apps.apple.com/us/app/google-authenticator/id388497605)). Steps to set up the authenticator can be found [here](https://www.youtube.com/watch?v=2ZLnBx8Mm40).  ## Manage users  Create and manage users on behalf of your organization.    1. Click *Users* on the left menu 2. Create a user by filling out user's information (`Email`,`First Name`, `Last Name`)  3. Check the appropriate permissions     - `Review` - Allows user to review verification jobs      - `Files` - Allows user to download PDFs of jobs      - `Admin` - Allows user to manage users and keys   - `2FA` - Add 2 Factor Authentication for the user   - `Groups` - Select the [group](/#section/Dashboard/Groups) to be assigned to the user   ## Manage keys ![Diagram 1](images/sigkey.png) [Keys](/#section/Overview/Security-and-Privacy) are required to use Vouched SDKs and APIs.  1. Click *Keys* on the left menu 1. Follow the instructions under the sections *Public Keys* and/or *Private Keys* and/or *Signature Keys*   - Note: Only one of each key can be active at a given time - Note: The signature key is an alternative to the private key - Note: Recreated keys will invalidate previous key    | Key Type   <img width=1670/>   | Description <img width=1670/> | Use Case <img width=1670/> |   | ----------- | ----------- | ----------- |   | Private key      | Used for security sensitive backend operations such as removing jobs       |   [API](/#section/Submit-a-verification/REST-Submit-job)      |   | Public key      | Used for submitting jobs via user facing SDKs     |   [JS Plugin](/#section/Submit-a-verification/JS-Plugin) and [Mobile](/#section/Submit-a-verification/Mobile-SDKs)     |   | Signature key      | Used for security sensitive backend operations such as securing the webhook      |   [Webhook](/#section/After-a-verification/Webhook)      |   | Sandbox private key      | Used for sandbox jobs via the REST endpoint  |   [Sandbox](/#section/Sandbox)      |   | Sandbox public key      | Used for sandbox jobs via the JS Plugin     |   [Plugin](/#section/SDKs/JS-Plugin)      |      ## Verification invites   ### Sending an invite  Sending verification invites is available from the *Candidates* section. An invite is not a [verification job](#section/Dashboard/Jobs).  When the user starts the verification process, a corresponding [verification job](#section/Dashboard/Jobs) is created.  ![Diagram 1](images/candidates.png)   1. Click *Candidates* on the left menu 1. Send a verification invite by filling out the top form     - `First Name` - The user's first name   - `Last Name` - The user's last name   - `Contact` - Where to the send the invite to   - `Phone` - Text the verification link to the given phone number     - `Email` - Email the verification link to the given email address     - `Send Message` - Generate and send SMS or email invite to the user   - `Internal Id` - *Optional* - Use to track verification with an application ID    - `Group` - *Optional* - Select a sub-group for the account if one is available    ### Invite Status  ![Diagram 1](images/invite_states.png)  Invites have the following status:    - `Sent` - The invite has been sent via email or SMS   - `Delivered` - The invite was delivered via email or SMS   - `Completed` - The customer has completed the verification process   Post invite actions are available via more icon (3 dots):    - `Copy` - Copy the invitation message including the unique invite URL. This option can be used to copy the contents of the    invite message if the `Resend Invite` option is not being used.   - `Resend` - Resend the invite to the user  ### Send an invite from your email   1. Create an invite from *Sending an invite* 1. Deselect `Send Message` 1. Click `Create` 1. Copy the invitation message from *Invite Status* 1. Send a messge from your email account with the invitation messae   ## Jobs  In the *Jobs* section, the verification jobs are in descending order based on time  1. Click *Jobs* on the left menu 1. If applicable, filter the verification jobs using the top form  Jobs have the following status:    - `Approved` - The verification process has been completed and approved   - `Failed` - The verification process has failed   - `Active` - User is in the process of being verified   - `Removed` - The job was deleted by the account admin   - `Warning` - The verification process was completed and may requrie a review  ## Manually Review Jobs  Once a specific job has been selected, for cases where a manual review is required, the user can override the results.   1. Click *Jobs* on the left menu 1. Select the job to be reviewed 1. Click on the `Review` tab.    - The status of the job is dependent on the status of the processes defined below it (Valid ID, Valid Selfie, Face Match, etc.)   - The grey status icon on the right indicates the process that had a result below the threshold. For icons with a `x` symbol, selecting    the said icon will switch it to an `approved / check` symbol if the reviewer deems it to be an error by the system. Changing every `x` icon    will change the Status icon to approved.   ## Delete Jobs  - **Deleted jobs cannot be retrieved** - In the *Jobs* section, the verification jobs are in descending order based on time - Click on the job to be deleted. - Select the `DANGER` tab and type in the `job id` in the **ID** field. - Click the `Remove` button to delete the job.   ## Groups ![Diagram 2](images/groups.png)   Accounts can have multiple groups associated with them, each with their own private and public [keys](#section/Overview/Security-and-Privacy).   Each group can have its own set of [jobs](#tag/jobs), and [invites](#tag/invites) for jobs.  ## Mobile Assets  Mobile development SDKs require asset files to run.  1. Click *Get Started* on the left menu 2. Check the *Mobile Application* checkbox     a. Select the platform of your choice     a. Click the *Assets* link to download     # SDKs   ## JS Plugin  ### Arguments     | Parameters  <img width=1670/>    | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | appId <br>`Required`     | string       |  Public key.           |   | type      | string       |      **Default**: `idv`<br> **Enums**:`idv - id with selfie verification`, `id - id only`.       |   | survey      | boolean       |    **Default**: `true` <br> Show an optional survey at the end.         |   | token      | string       |     Time limited session token used to restart a session.        |   | crossDevice      | boolean       |   Provides the ability to maintain the same session across multiple devices using the token retrieved from onInit.        |   | crossDeviceQRCode      | boolean       |    If the user is on a desktop computer, a scannable QR Code enables the verification to continue on their mobile phone. Once completed, control is given back to the desktop.        |   | crossDeviceSMS      | boolean       |    If the user is on a desktop computer, the user can input a cell phone number and we will text a secure link to continue verification.        |   | crossDeviceURL      | string       |    Option to forward handoff verification to a custom site.        |   | showUploadFirst      | boolean       |      **Default**: `true` <br> Show the upload first instead of the camera.       |   | face      | string       |     **Default**: `camera`<br> **Enums**: `upload`, `camera`, `both` <br> Specify how user can submit their selfie.      |   | id      | string       |      **Default**: `both` <br> **Enums**: `upload`, `camera`, `both` <br> Specify how user can submit their id.       |   | idLiveness      | string       |      **Default**: `null` <br> Only applicable for ID Card liveness check. Add `distance` to activate liveness check. idLiveness checks for user movements with ID Card.       |   | liveness      | string       |   **Default**: `mouth` <br> **Enums**: `mouth`, `orientation`, `distance`, `straight` <br> Only applicable for selfie/headshot liveness check. Specify how Vouched should check for face liveness. The \"mouth\" liveness, checks for mouth movements, \"orientation\" checks the facial orientation, `distance` checks for user movements, and \"straight\" checks if the user is looking at the camera.        |   | enableEyeCheck      | boolean       |    **Default**: `false`  Only applicable for selfies. Checks if user has kept their eye open before selfie image is captured.      |   | [properties](#jobproperty)      | [JobProperty]  |     List of JobProperty - Arbitrary properties to add to the job, i.e. name, value. |   | [content](#content)     | object       |       Properties to change the content.      |   | [verification](#verification)       | object       |       Optional verification properties.      |   | callbackURL      | String      | Upon the job's completion, Vouched will POST the job results to the defined [webhook](/#section/After-a-verification/Webhook). |   | [stepTitles](#steptitles)       | object       |  Titles for steps of the verification process.           |   | [theme](#theme)       | object       |    Change the theme and styles of the plugin.         |   | includeBarcode      | boolean       |       Enable ID barcode capture and processing for applicable IDs. The error `BarcodeMatchError` results when `idMatch` falls below the normalized threshold or the user skips the barcode step. |   | sandbox      | boolean       |       If true, creates a sandbox job      |   | disableCssBaseline      | boolean       |       If true, disables the internal CSS baseline styles      |   | onSubmit      | function       |       Javascript callback when a user submits a photo      |   | onCamera      | function       |       Javascript callback when camera initialization is complete      |   | onCameraEvent      | function       |       Javascript callback when there are changes to the Camera DOM element      |   | onInit      | function       |       Javascript callback during initialization of the webapp      |   | onDone      | function       |       Javascript callback when a verification is complete      |   | onSurveyDone      | function       |       Javascript callback when a survey is submitted      |   | showTermsAndPrivacy          |   boolean             |     Flag to show terms and privacy                                                   |   | showProgressBar          |   boolean             |     Flag to show the ProgressBar                                                   |   | maxRetriesBeforeNext          |   number             |     Number of times to force users to retry before showing the Next button (Default: 0 - show Next button immediately) - Deprecated alias: idShowNext                                                    |   | [handoffView](#handoffview)       | object       |  UI configurations for the handoff view.          |   | locale          |   string             |     **Default**: `en` <br> **Enums**: `en`, `es`, `fr_CA`. Specify the language.                                                  |   ### content   | Property  <img width=1670/>    | Type <img width=1670/> | Description <img width=1670/>|   | ----------- | ----------- | ----------- |   | success      | string       |  The messages posted after successful submission. <br> **Example**: `'Please close this window to return your online visit.'`.        |   | review      | string       |    Response to the user describing review of results.  <br> **Example**:<br> `'Thank you for providing your information. We will review and get back to you.'`.       |   | crossDeviceSuccess      | string       | Message posted after the crossDevice verification success.    <br> **Example**: `'Verification is complete, continue on your desktop.'`.      |   | crossDeviceInstructions      | string       | Instructions and requirements for crossDevice. <br>**Example**: <br> `'We need to verify your identity. This requires government-issued photo ID as well as selfie. Please follow the instructions below to continue the verification process on your phone:'` <br> `1. Open the Camera App from your phone`. <br> `2. Hold the device so the QR Code appears in the viewfinder`. <br> `3. Click on notification to open the verification link`.            |   | crossDeviceTitle      | string       | Title for crossDevice. <br> **Example**: `'Identity Verification'`.        |   | crossDeviceShowOff      | boolean       |     Allows Handoff to continue on Desktop.        |   | upperStartInstructions      | string       |     Upper Instructions on Start Screen.        |   | middleStartInstructions      | string       |      Middle Instructions on Start Screen.       |   | lowerStartInstructions      | string       |      Lower Instructions on Start Screen.       |   | upperIdInstructions      | string       |   Upper Instructions on ID Screen.          |   | lowerIdInstructions      | string       |    Lower Instructions on ID Screen. <br> **Example**: `\"You can either upload a photo you've already taken, or take a photo of your ID now.\"`.        |   | upperBackIdInstructions      | string       |   Upper Instructions on Back ID Screen.          |   | lowerBackIdInstructions      | string       |   Lower Instructions on Back ID Screen.          |   | upperFaceInstructions      | string       |     Upper Instructions on Face Screen.        |   | lowerFaceInstructions      | string       |      Lower Instructions on Face Screen.       |   | lowestFaceInstructions      | string       |      Lowest Instructions on Face Screen.       |   | upperIdCapturedInstructions      | string       |      Upper Instructions on ID Captured Screen.       |   | middleIdCapturedInstructions      | string       |      Middle Instructions on ID Captured Screen.       |   | lowerIdCapturedInstructions      | string       |      Lower Instructions on ID Captured Screen.       |   | cameraIDButton      | string       |      String text for camera button on ID Screen.       |   | cameraFaceButton      | string       |      String text for camera button on Face Screen.       |   | upperSuccess      | string       |     Success message at the top. <br> **Example**: `'Your photo uploads are complete!'`.        |   | lowerSuccess      | string       |    Success message at the bottom. <br> **Example**: `'Thank you.'`.       |   | upperFailure      | string       |     Failure message at the top.  <br> **Example**: `'Try Again'`.     |   | lowerFailure      | string       |     Failure message at the bottom.  <br> **Example**: `\"The photo you shared can't be used for validation. Please take another picture, making sure the image of your face or your ID is clear.\"`.     |   | verifyPass      | string       |    The verification passed.  <br> **Example**: `'Everything looks good to us. Check your information and click next.'`.     |   | verifyFail      |  string       |    The verification failed.  <br> **Example**: `\"We couldn't verify you. If you disagree, update your information and click next.\"`.    |   | qrHandoffInstructions      | string       |    Optional bottom Handoff Instructions.         |   | qrDesktopInstructions      | string       |    Instructions for crossDeviceShowoff. qrDesktopInstructions is the instructions and needs to have '{qrDesktopLink}' to inject text for the link. <br> **Example**: `'Alternatively, you can {qrDesktopLink} if you have a good desktop camera.'`.          |   | qrDesktopLink      | string       |    String text used in qrDesktopInstructions to replace {qrDesktopLink}. qrDesktopLink becomes the link text. <br> **Example**: Continuing the example above, if qrDesktopLink = 'continue', qrDesktopInstructions becomes `'Alternatively, you can continue if you have a good desktop camera.'`.           |   | startCompanyInstructions      | string       |     Optional Start Screen Instruction.        |   | carouselCompanyText      | array of strings       |    Array of strings where string at each index make up the Carousel Slide.         |   | carouselCompanyImg      | array of strings       |     Array of strings (image URL) where image at each index make up the Carousel Slide.        |   | progressIndicatorLoading      | string       |   String that would replace term 'loading' in the Progress Indicator.          |   | progressIndicatorVouching      | string       |   String that would replace term 'vouching' in the Progress Indicator.          |   | surveyButtonLabel      | string       |   Optional string to override the text in the survey submit button          |   | overlayHeader      | string       |   Optional string to override the header text in the Avant CameraScreen Overlay          |   | startScreenButtonLabel      | string       |   Optional string to override the button text in the Avant Start screen         |   | cameraTopIDDirections      | string       |   Optional string to override the top text in the Avant ID Camera screen         |   | cameraTopBackIdDirections      | string       |   Optional string to override the top text in the Avant Back ID Camera screen         |   | cameraTopFaceDirections      | string       |   Optional string to override the top text in the Avant Face Camera screen         |   | cameraButtonLabelContinueSelfie      | string       |   Optional string to override the button text in the Avant ID Captured screen         |   | retryMessageInvalidIdPhoto          |   string             |     **Default**: `We could not recognize the ID` <br> Optional prop to override the first line of the retry message in the ID screen.                                                   |   | retryMessageInvalidUserPhoto          |   string             |     **Default**: `We could not recognize the selfie` <br> Optional prop to override the first line of the retry message in the Face screen.                                                  |   | cameraScreenLabelFrontId          |   string             |     Optional prop to override the initial camera labels in the FrontID Camera Screen.                                                  |   | cameraScreenLabelBackId          |   string             |     Optional prop to override the initial camera labels in the BackID Camera Screen.                                                  |   | cameraFaceLabelShowFace          |   string             |     Optional prop to override the initial camera labels in the Face Camera Screen.                                                  |   | mobileHandoffDoneMessage          |   string             |     Optional prop for extra text on the Done Screen when doing Handoff on Mobile                                                  |    ### verification   | Property  <img width=1670/>    | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | firstName     | string       |   **Example**: `Jerry`          |   | lastName      | string       |   **Example**: `Lawson`          |   | birthDate      | string       |  **Example**: `12/01/1940`           |   | email      | string       |    Used for crosschecking identity.         |   | phone      | string       |    Used for crosschecking identity.         |   | enableIPAddress       | boolean | Enable IP Adddress inspection. |   | enablePhysicalAddress       | boolean | Enable Physical Adddress check. |   | enableDarkWeb       | boolean | Enable Darkweb check. |   | enableCrossCheck       | boolean | Enable phone, email and address crosscheck. |   | enableAAMVA       | boolean | Enable aamva check on the ID. |        ### stepTitles   | Property  <img width=1670/>   | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | FrontId <br> `Required`      | string       |   The message shown on the ID screen. <br> **Example**: `\"Front ID\"`.         |   | Face <br> `Required`     | string       |    The message shown on the face screen. <br> **Example**: `\"Face\"`.        |   | Done <br> `Required`     | string       |    The message shown on the completion screen. <br> **Example**:`\"Done verifying\"`.        |  ### theme   | Property   <img width=1670/>   | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | name      | string       |   Compatible with theme: `verbose`, `avant` <br> **Enums**: `classic` , `verbose` , `avant`       |   | iconLabelColor      | string       |    Icon Label color. <br> Compatible with theme: `verbose` <br> **Example**: `'#413d3a'`.        |   | bgColor      | string       |    Background color. <br> Compatible with theme: `verbose`        |   | logo     | string       |      Logo. <br> Compatible with theme: `verbose`, `avant` <br> **Example**: <br> `src: 'https://www.vouched.id/wp-content/uploads/2020/11/vouched_logo_hi_res.png', <br> style: { maxWidth: 150, marginBottom: 30 }`.       |   | navigationActiveText      | string       | Compatible with theme: `verbose`  <br> **Example**: `'#413d3a'`.          |   | iconColor     | string       |    Icon color.  <br> Compatible with theme: `verbose` <br> **Example**: `'#f6f5f3'`.       |   | iconBackground      | string       |    Icon Background. <br> Compatible with theme: `verbose` <br> **Example**: `'#c8ae8f'`.        |   | baseColor      | string       |    Main color.  <br> Compatible with theme: `verbose`, `avant` <br> **Example**: `'#4d7279'`.        |   | fontColor      | string       |    Font color.  <br> Compatible with theme: `verbose` <br> **Example**: `'#413d3a'`.       |   | font      | string       |    Font Family. <br> Compatible with theme: `verbose`, `avant` <br> **Example**: `'Open Sans'`.        |   | navigationActiveBackground      | string       |    Background of active breadcrumbs. <br> Compatible with theme: `verbose` <br> **Example**: `'#bacbd1'`.        |   | navigationDisabledBackground      | string       |    Background of disabled breadcrumbs. <br> Compatible with theme: `verbose` <br> **Example**: `'#bacbd1'`.        |   | navigationDisabledText      | string       |    Text color on disabled breadcrumbs. <br> Compatible with theme: `verbose` <br> **Example**: `'#4d7279'`.        |   | secondaryButtonColor      | string       |    Color of the secondary buttons (Grey Retry Next button, Survey Button). **Default**: `'rgb(216, 216, 216)'`       |   | handoffLinkColor      | string       |    Text color for the Handoff verification link. **Default**: `'#40a1ed'`       |  ### JobProperty   | Property   <img width=1670/>   | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | name      | string       |   Property name        |   | value    | string       |    Property value       |  ### HandoffView   | Property   <img width=1670/>   | Type <img width=1670/> | Description <img width=1670/> |   | ----------- | ----------- | ----------- |   | qRCodeSize     | number  |  **Default**: `undefined` <br/> The QR Code canvas element size in pixels. <br/> When `undefined` the size will be determined.   |   | onlyShowQRCode | boolean |  **Default**: `false` <br/> Only shows the QR code.  |  ### Unmount JS Plugin  ``` vouched.unmount('#vouched-element') ```  ## iOS  1. [Create a public key](#section/Dashboard/Manage-keys) 2. [Download the mobile assets](#section/Dashboard/Mobile-Assets) 3. Follow the steps in the [iOS README](https://github.com/vouched/vouched-ios)  ## Android  1. [Create a public key](#section/Dashboard/Manage-keys) 2. [Download the mobile assets](#section/Dashboard/Mobile-Assets) 3. Follow the steps in the [Android README](https://github.com/vouched/vouched-android)  ## React Native  1. [Create a public key](#section/Dashboard/Manage-keys) 2. [Download the mobile assets](#section/Dashboard/Mobile-Assets) 3. Follow the steps in the [React Native README](https://github.com/vouched/vouched-react-native)  # Sandbox  Sandbox mode enables you to make requests to the Vouched API without having to incur any usage costs.  Sandbox mode will accept the same parameters as live mode requests but will not perform any actual validation on the submitted IDs. Instead, a predefined response that returns the same model definition will be returned. Since there is no validation occurring, jobs that are generated through sandbox mode should not be considered as validations of the submitted data.   Sandbox mode should only be used for testing purposes.   The sandbox mode feature is still in development so as of right now it is only available for integrations to the [submitJob](/#operation/SubmitJob) REST API endpoint. More endpoints will be enabled for sandbox mode in the future but for now, you can only use it to test if you are integrating through the REST API.   In order to submit a sandbox job you can:  1. Head to the keys page and generate a new \"Sandbox Private Key\"  2. Using the sandbox url, https://sandbox.vouched.id, and Postman or cURL, create a POST request to the [submitJob](/#operation/SubmitJob) endpoint. Make sure to use the sandbox url. Any jobs that are created through the live URL are billable!  3. Set the following headers for your request  - X-API-Key: ${Your generated sandbox private key}  - Content-Type: application/json  4. Submit your request  5. You should receive a response back from the sandbox server with the result of the request.   Additionally, you can head over the the jobs page on the dashboard and view your job result by toggling the \"View Sandbox Data\" switch on the navigation sidebar  # Support   For questions and feedback, contact us at [support@vouched.id](mailto:support@vouched.id). <br> <br> For status updates or incident reports on services that are a part of Vouched, view our Status Dashboard at [https://status.vouched.id/](https://status.vouched.id/). ",
  "main": "index.js",
  "scripts": {
	"prestart": "npm install",
	"start": "node index.js"
  },
  "keywords": [
    "swagger"
  ],
  "license": "Unlicense",
  "private": true,
  "dependencies": {
    "connect": "^3.2.0",
    "js-yaml": "^3.3.0",
    "oas3-tools": "^2.2.3"
  }
}
